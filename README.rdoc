= Network Application Framework (Naf)

== Getting Started with Naf (Fiksu's Job Scheduling Engine)

=== Creating Postgres-backed Rails App

1. Create a new rails application (call it whatever you want, for my example it's: myapp), and enter

    rails new myapp
    
    cd myapp

2. Create a new Postgres development database

    createdb -O postgres myapp_development

3. Delete the sqlite gem dependency from your Gemfile, and add the Postgres adapter gem, the Fiksu Af gem, and Fiksu Naf gem, and front-end UI dependencies.

    gem 'pg'
    gem 'af',  :git => 'git@github.com:fiksu/af.git'
    gem 'naf', :git => 'git@github.com:fiksu/naf.git'
    gem 'partitioned', :git => 'git@github.com:fiksu/partitioned.git, :ref => '7fcb0c9d265488f060b60d4b37998f7f2c923ceb'
    group :assets do
      gem 'sass-rails',   '~> 3.2.3'
      gem 'coffee-rails', '~> 3.2.1'
      gem 'uglifier', '>= 1.0.3'
    end
    gem 'jquery-rails'

4. You must also configure your application to serve assets from the asset pipeline by adding/editing the line from config/application.rb
   Move public/[images|javascripts|stylesheets] to app/assets/[images|javascripts|stylesheets].

    config.assets.enabled = true

3. Edit your config/database.yml file

    development:
        adapter: postgresql
        encoding: UTF8
        username: postgres
        host: localhost
        database: myapp_development

=== Importing Naf

1. Now import these new gems
    
    bundle install

2. Run the generator to copy a configuration YAML file, and an initializer into your main application's code base.
   You can optionally provide an argument which specifies the Postgres schema which the Naf tables will reside in, default is: 'naf'

    rails generate naf_system [naf]

3. This has created/edited the following files:

    config/job_system_schema_config.yml (Specifies the schema_name, UI title)
    config/initializers/job_system_initializer.rb  (Loads the schema_name, model_class, controller_class)
    config/routes.rb  (Edited to mount Naf as a rails engine, at the default path "/job_system")

4. Now bring in all of the Naf schema migrations.  

    rake naf:install:migrations

=== Using a Non-Primary Database (Skip if you aren't)

1. By default the Naf tables live on your primary database.  You can optionally configure the naf tables to live on a specific database connection, add entries: naf_development, naf_production etc. to your config/database.yml.  For example, if you had a database named: sparedb_development, you can have the Naf tables live there by adding:

    naf_development:
        adapter: postgresql
        encoding: UTF8
        username: postgres
        host: localhost
        database: sparedb_development

2. Now you must run this rake command to isolate the migrations from your main apps migrations.   This moves all naf migrations to:  db/naf/migrate.  When you bundle the latest version of Naf, there may be new schema migrations, so you must isolate those as well.  Run this command, and make sure to add it to your deploy script.

    rake naf:isolate:migrations

3. Now that all of the latest migrations are isolated from the main app, they work on your non-primary database.  When you bundle the latest version of Naf, and isolate new migrations, they have to be run.  Run this command and make sure to add it to your deploy script.

    rake naf:db:migrate

=== Run the migrations

1. Now if you are using your Primary database for Naf, then your app controls the migrations.  So run them (does nothing if you using a non-primary database, and have run #2, and #3 from the above section):

    rake db:migrate

2. Set up partitioning
   
    rake naf:janitor:infrastructure

3. Try running the Rails console, and see that you have the Naf models loaded, and mapped to the database.

    rails console
    Naf::Affinity.all

=== Configure

1. If you use a base controller for your application's authentication, edit the line from config/initializers/naf_initializer.rb

    Naf.controller_class = "::ApplicationController"

2. If you want use your non-primary database for Naf tables (skip if you aren't). edit the line from config/initializers/naf_initializer.rb to read:

    Naf.model_class = "::Naf::OtherBase"

   see this example class at: examples/other_base.rb

3. Now you can visit the Naf Job System UI mounted at the default path '/job_system' (Configurable in config/routes.rb)

4. You can change the name shown on the page, edit the 'main_app_title' attribute in config/job_system_config.yml.

=== Logging

Papertrail is to manage logging

1. Acquire a papertrail log-in associated with fiksu.com (https://papertrailapp.com)

2. Create new "logging destination" at https://papertrailapp.com/account/logging, the destination will be a port:
     port 64857 is assigned to WAC
     port 42751 is assigned to FreeMyApps
     port 60979 is assigned to Data-API

   We'll call this LOGGING_PORT below.

==== Configure using Papertrail's Remote Syslog Ruby daemon

For each server to be configured:

1. Run:
    gem install remote_syslog

2. Copy the following to /etc/log_files.yml

 files: 
   - /var/log/nginx/*.log
   - /var/log/af/*.log
   - /home/rails/wac/shared/log/*.log
 destination:
   host: logs.papertrailapp.com
   port: LOGGING_PORT

3. Set up log rotation for the things that matter
  /etc/logrotate.d/af.log
    /var/log/af/*.log {
      daily
      missingok
      rotate 5
      size 50M
      compress
      delaycompress
      copytruncate
      notifempty
      create 644 root adm
    }

4. Start the daemon:

    remote_syslog --tls

==== Configure using Log4r to directly output to Papertrail

1. Add this gem to your Gemfile

    gem 'log4r_remote_syslog_outputter', :git => "git@github.com:nlim/log4r_remote_syslog_outputter.git"

2. Make a file config/log4r-development.yml

    # Define the Loggers
    logger_defaults: &logger_defaults
      level: ALL
      trace: true
      additive: false
      outputters:
      - papertrail

    loggers:
    - name: Process::Naf::Runner
      <<: *logger_defaults
    - name: Process::Naf::Runner::Af::AdvisoryLocker
      <<: *logger_defaults
    - name: {MY_NAF_SUBCLASS_NAME}
      <<: *logger_defaults

    outputters:
    - type: RemoteSyslogOutputter
      name: papertrail
      level: ALL
      url: syslog://logs.papertrailapp.com:LOGGING_PORT
      program: My_Program
      formatter:
        pattern     : '%c %l: %m'
        type        : PatternFormatter

3. Check Papertrail dashboard for your logger events!

=== Teardown

1. Undo all of this setup by running the following rake task, rolling back all the naf migrations, and deleting all copied/installed files.  WARNING: This will wipe away all of your data in your Naf tables.

     rake naf:teardown

== Using Naf

=== Initialize an entry for this machine

      rails runner Process::Naf::Runner.run --create-new-machine --server-name "Keith's machine"

=== Creating your own script

1.  To create your own script to be run as a Naf application, you must subclass Process::Naf::Application and override the work method

2.  You can specify command line options for your script by invoking the opt class method, and setting a default.  See the following example.

      class MyScript < ::Process::Naf::Application
        opt :thing, :default => "world"
        def work
          puts "Hello #{@thing}!"
        end
      end

3.  Now can you can run it using rails runner:

      rails runner MyScript.run --thing friend

=== Running Naf (on local development machine)

1.  Now to setup your scripts to be run as Naf applications, you add it to the applications table through the Naf Web UI mounted on your application.  
    Specify the command, e.g MyScript.run --thing enemy

2.  When viewing the application your just must click "Application Schedule" to configure a schedule for the application.  If you find yourself on the list of applications, hit the clock icon for the desired application

3.  Specify the run_interval, application_run_group_restriction, and application_run_group_name and create.

4.  Now you must configure your machine to be able to run the runner.  Add your machine to the machines table through the UI.  Specify your server_address as your subnet IP address

5.  Now you can run the runner:

      rails runner ::Process::Naf::Runner.run

6.  Now you can view the jobs table and see updates, search/filter, and page through the job queue's history.

== Developing for Naf

=== Cloning the Repository

1.  Clone the latest version of master

      git clone git@github.com:fiksu/naf.git

2.  Bundle the dependencies

      bundle install

=== Running Tests

1.  If you are developing for Naf, you will want to be able to run the test suite.  First change to the spec/dummy directory and run:

      rake db:create

    This will create database naf_development, and naf_test for the dummy application

2.  Now run the migrations for the dummy application for the development environment

      rake db:migrate

3.  Set up the partitioning

      rake naf:janitor:infrastructure

4.  Set up your machine:

      rails runner Process::Naf::Runner.run --create-new-machine --server-name "Keith's machine"

5.  Clone the structure of the naf_development database to the naf_test database

      rake db:test:clone_structure

6.  Now change back to the root directory of the engine repository, and run:

      rake spec


  